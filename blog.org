#+STARTUP: content
#+TITLE: Shane Sveller
#+AUTHOR: Shane Sveller
#+HUGO_BASE_DIR: .
#+HUGO_AUTO_SET_LASTMOD: t

* Pages
  :PROPERTIES:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
  :EXPORT_HUGO_MENU: :menu main
  :EXPORT_HUGO_SECTION: pages
  :VISIBILITY: children
  :END:

** DONE Hardware                                                  :@hardware:
   CLOSED: [2018-10-21 Sun 08:30]
   :PROPERTIES:
   :EXPORT_FILE_NAME: hardware
   :END:

My current custom-built gaming PC is as follows:

- Fractal Design R5 Black case
- Gigabyte GA-Z170X-Gaming GT motherboard
- Intel Core i7-6700k (Skylake) at 4.0GHz
- Corsair H110i GT liquid CPU cooler
- 32GB (4x8GB) Crucial Ballistix Elite DDR4-2666 RAM
- Asus Strix GeForce GTX 1080ti 11GB
- Samsung 950 Pro 256GB m.2 solid-state drive
- Samsung 850 Pro 512GB solid-state drive
- 2x Western Digital Red 1TB 7200rpm hard drive
- Windows 10 Pro x64
- Razer Naga mouse
- Razer Black Widow Chroma keyboard
- LG 34UM95-P 34" Ultrawide monitor
- Logitech Z-2300 speakers

I do all of my personal development work on:

- 2018 15" MacBook Pro
- 32GB DDR4-2400Mhz
- 2.9 GHz Intel Core i9 (6 cores)
- 1TB ApplePCI-E solid-state drive
- OSX 10.13 High Sierra

I have a file server:

- Synology 1513+
- Western Digital Red 4TB 7200rpm hard drive (5)

I have an Intel NUC virtualization server:

- Intel Skull Canyon NUC 6i7KYK
- 32GB (2x16GB) Crucial DDR4-2400
- 2x Crucial 500GB MX200 M.2 SSD

I have a Lenovo mid-tower virtualization server:

- Lenovo ThinkServer TS140
- Intel Xeon E3-1225 v3 3.2GHz
- 32GB (4x8GB) Crucial ECC DDR3-1600
- Western Digital Red 1TB 7200rpm (3)
- Intel I340-T4 (PCIE 2.0 x 4 lane, 4x1Gb NIC)

** TODO Software and Services                                     :@software:
   :PROPERTIES:
   :EXPORT_FILE_NAME: software-and-services
   :EXPORT_DATE: 2012-08-05
   :END:

   In no particular order, I endorse the following software, products and
   services on a personal level:

*** OSX Software

    - [[http://adium.im/][Adium]]
    - [[http://sprw.me/][Sparrow]] - no new development due to acquisition
      by Google is heartbreaking
    - [[http://mac.github.com][GitHub OSX client]]
    - [[http://reederapp.com/mac/][Reeder]] - Best RSS reader I've ever
      used, and it has a fantastic [[http://reederapp.com/ipad/][iOS port]]!
    - [[http://tapbots.com/tweetbot_mac/][TweetBot]] - Originally on
      [[http://tapbots.com/software/tweetbot/][iOS]], and is far and away my
      preferred Twitter client on both platforms. Beats the hell out of
      TweetDeck.
    - [[http://www.iterm2.com][iTerm 2]]
    - [[http://tmux.sourceforge.net][tmux]] - not OSX specific, but where I
      use it most

*** Cross-platform Software

    - [[http://dropbox.com/][Dropbox]] - still one of my favorite ways to
      keep files available on all my machines, including the iPad. Bonus:
      integration with
      [[http://pragprog.com/frequently-asked-questions/ebooks/read-on-desktop-laptop#dropbox][PragProg]]
      and
      [[http://shop.oreilly.com/category/customer-service/dropbox.do][O'Reilly]]
      for near-instant notificaiton of new e-book revisions!
    - [[http://sublimetext.com/2][SublimeText 2]] - see my 1-month
      impressions [[/posts/2012-08-05-sublimetext-2/][here]]!
    - [[http://spotify.com/][Spotify]] - the only streaming music service
      I'm still consistently glad I subscribe to. Works like a charm on
      Windows and OSX, and even has a
      [[http://spotify.com/us/download/previews/][Linux port]]!
    - [[https://kindle.amazon.com][Amazon Kindle]] - my preferred e-reader
      platform because it has great dedicated
      [[https://www.amazon.com/kindle-store-ebooks-newspapers-blogs/b/ref=r_ksl_h_i_gl?node=133141011][hardware
      readers]], and a reading app for pretty much
      [[https://www.amazon.com/gp/kindle/kcp/ref=r_kala_h_i_gl][every
      platform under the sun]].

*** Cloud/Web Apps

    - [[http://heroku.com/][Heroku]]
    - [[http://mint.com/][Mint]]
    - [[http://pinboard.in/][Pinboard]] - bookmarking service /ala/
      Delicious but without all the social trappings - and with great
      integration in Twitter clients/RSS readers!
    - [[http://pandora.com/][Pandora]] - I'm less happy with their variety
      than I wish, but still a great service

*** Screencasts

    - [[http://railscasts.com/][Railscasts]] - Ryan Bates has been
      consistently putting out focused, concise and informative screencasts
      on a variety of topics related to Ruby on Rails or programming at
      large. Congrats on a full year of doing RailsCasts full-time, Ryan!
      Happy to be a Pro subscriber.
    - [[https://peepcode.com/][PeepCode]] - May be less prolific than
      Railscasts, but the screencasts Geoffrey puts out are very meaty and
      I'm a big fan of the
      [[https://peepcode.com/products/play-by-play-tenderlove-ruby-on-rails][Play
      by Play series]].

*** Podcasts

    - [[http://ruby5.envylabs.com/][Ruby5]] is a great way to keep abreast
      of new or upcoming projects from the Ruby ecosystem
    - [[http://rubyrogues.com/][Ruby Rogues]] isn't nearly so bite-sized but
      dives deeper into subjects and often has very interesting guests

*** Reference Books

    - [[http://pragprog.com/][Pragmatic Programmers]] keeps publishing
      awesome books from great authors on exciting topics
    - [[http://www.manning.com/][Manning]] - I still buy the odd
      [[http://www.manning.com/about/meap][MEAP book]] on an upcoming
      technology and have yet to regret it
    - O'Reilly publishes most new books in an ebook format and sports
      integration with Dropbox for delivery of updated versions

*** E-Book Vendors

    - [[http://rpg.drivethrustuff.com/][DriveThruRPG]] has awesome sales on
      tabletop RPG rulebooks now and then - I've got a ton of
      [[http://www.white-wolf.com/classic-world-of-darkness][old]]/
      [[http://www.white-wolf.com/new-world-of-darkness][new World of
      Darkness]] and [[http://shadowrun4.com/][Shadowrun]], some
      Exalted/Trinity, and a dash of [[http://paizo.com/][Pathfinder]].

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:

** Elixir                                                           :@elixir:
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** DONE Managing Elixir runtime version with ~asdf~     :asdf:elixir:erlang:
    CLOSED: [2017-12-23 Sat 22:30]
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_DATE: 2017-12-23
    :EXPORT_FILE_NAME: managing-elixir-runtime-version-with-asdf
    :END:

    An uncomfortably common problem when developing for a particular programming
    language is needing to deal with compatibility issues across different
    versions of the language runtime. Most often this means keeping individual
    projects tied to their then-current version of the language until such time
    that the project can address any compatibility issues with later language
    releases. To that end, Ruby developers are probably familiar with
    one of ~rbenv~, ~chruby~ or ~rvm~, for example. Elixir isn't much different
    in this regard.

    <!--more-->

    One available project that I find pretty promising is ~asdf~, which is
    self-described as:

    #+BEGIN_QUOTE
    [An] extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more
    #+END_QUOTE

    It fulfills some of the same roles that ~rbenv~ and friends do, while
    supporting multiple languages and even other software tools in a fairly
    standardized way.

**** Installation

***** Homebrew

     #+BEGIN_SRC sh
       brew install asdf
     #+END_SRC

     Follow the instructions in the output, which you can read again with ~brew
     info asdf~ if you missed them. As of this writing, those instructions are:

     #+BEGIN_QUOTE
     Add the following line to your bash profile (e.g. ~/.bashrc, ~/.profile, or ~/.bash_profile)

     =source /usr/local/opt/asdf/asdf.sh=

     If you use Fish shell, add the following line to your fish config (e.g. ~/.config/fish/config.fish)

     =source /usr/local/opt/asdf/asdf.fish=
     #+END_QUOTE

***** Git

      You can follow the latest manual installation instructions from the
      project's [[https://github.com/asdf-vm/asdf/tree/8794210b8e7d87fcead78ae3b7b903cf87dcf0d6#setup][README]], but today it includes:

      #+BEGIN_SRC sh
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.0

        # install shell hooks
        # I personally prefer `source` to `.`

        # bash users
        echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bash_profile
        echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> ~/.bash_profile

        # zsh users
        echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.zshrc
        echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> ~/.zshrc

        # fish users
        echo 'source ~/.asdf/asdf.fish' >> ~/.config/fish/config.fish
        mkdir -p ~/.config/fish/completions; and cp ~/.asdf/completions/asdf.fish ~/.config/fish/completions
      #+END_SRC

****** Prerequisites

       At the time of writing, here are the prerequisites recommended to use
       ~asdf~, which can be installed with [[https://brew.sh/][Homebrew]]:

       #+BEGIN_SRC sh
         brew install autoconf automake coreutils \
              libtool libxslt libyaml openssl \
              readline unixodbc
       #+END_SRC

***** Install required asdf plugins

      You can check the available plugins, based on the open-source plugin index [[https://github.com/asdf-vm/asdf-plugins][here]]:

      #+BEGIN_SRC sh
        asdf plugin-list-all
      #+END_SRC

      After identifying desirable plugins:

     #+BEGIN_SRC sh
       asdf plugin-install erlang
       asdf plugin-install elixir
       # phoenix users will likely also want:
       asdf plugin-install nodejs
     #+END_SRC

**** Usage

     To install the latest Erlang and Elixir versions at the time of writing:

     #+BEGIN_SRC sh
       asdf install erlang 20.2
       asdf install elixir 1.5.3
     #+END_SRC

     Phoenix users will also want:

     #+BEGIN_SRC sh
       asdf list-all nodejs
       asdf install nodejs 9.3.0
     #+END_SRC

***** Checking available tool versions

      You can see what versions ~asdf~ currently supports for installation with
      this command:

      #+BEGIN_SRC sh
        # asdf list-all [plugin]
        asdf list-all erlang
        asdf list-all elixir
        asdf list-all nodejs
      #+END_SRC

      Each plugin is able to implement this behavior in its own way, so their
      behavior may vary. Some are able to directly examine the releases of the
      upstream language project, others require manual support within the ~asdf~
      plugin in question, and so may lag behind new releases.

***** Installing a specific Erlang patch version

     The author of ~asdf~, @HashNuke on GitHub, cleared up in [[https://github.com/asdf-vm/asdf-erlang/issues/48#issuecomment-339137374][this GitHub issue]]
     that any tagged release of Erlang can be installed with ~asdf-erlang~:

     #+BEGIN_QUOTE
     We already support it. You can do the following:

     =asdf install erlang ref:OTP-20.1.2=

     Where OTP-20.1.2 is a valid tag that you can find on
     https://github.com/erlang/otp/releases. You can also specify a commit sha
     or branch name if you insist on the latest super-powers.
     #+END_QUOTE

     As of this writing the latest release is [[https://github.com/erlang/otp/releases/tag/OTP-20.2.2][20.2.2]], so that can be installed
     like so:

     #+BEGIN_SRC sh
       asdf install erlang ref:OTP-20.2.2
       # set global default
       asdf global erlang ref:OTP-20.2.2
     #+END_SRC

***** Installing Elixir from ~master~

      If you'd like to use the latest and greatest features, such as the
      upcoming
      [[https://github.com/elixir-lang/elixir/blob/v1.6/CHANGELOG.md#code-formatter][~mix
      format~ command]] slated for inclusion in Elixir 1.6, you can install the
      current version of the elixir-lang/elixir repository's ~master~ branch:

      #+BEGIN_SRC sh
        asdf install elixir master
      #+END_SRC

      You can use this version all the time via ~asdf global~ or ~asdf local~,
      or on one-off commands by setting the ~ASDF_ELIXIR_VERSION~ environment
      variable to ~master~.

***** Per-project tool versions

      By using ~asdf local~, you can configure pre-project tool versions, which
      are persisted in a project-local ~.tool-versions~ file you may wish to
      include in your global ~.gitignore~. When revisiting a project later, you
      can run ~asdf install~ with no additional arguments to ensure that the
      project's desired software versions are available.

**** Keeping up to date

     To update ~asdf~ itself:

     #+BEGIN_SRC sh
       asdf update
     #+END_SRC

     To update ~asdf~ plugins:

     #+BEGIN_SRC sh
       # update all plugins
       asdf plugin-update --all
       # update individual plugin
       asdf plugin-update erlang
     #+END_SRC

**** Troubleshooting

     You can inspect where a particular version of a particular language is
     installed with ~asdf where~:

     #+BEGIN_SRC sh
       asdf where erlang 20.2
       # /Users/shane/.asdf/installs/erlang/20.2
     #+END_SRC

     You can make sure that newly-installed binaries (such as those installed by
     ~npm~) are detected by using ~asdf reshim~:

     #+BEGIN_SRC sh
       asdf reshim nodejs 9.3.0
       # no output
     #+END_SRC

     You can inspect which specific binary will be used in your current context,
     accounting for both global and local tool versions, with ~asdf which~:

     #+BEGIN_SRC sh
       asdf which erlang
       # /Users/shane/.asdf/installs/erlang/20.1/bin/erlang
     #+END_SRC

**** Other notable plugins

     Here are a few other asdf plugins I'm prone to using in the course of my
     infrastructure-focused work:

     - [[https://github.com/Banno/asdf-kubectl][kubectl]]
     - [[https://github.com/alvarobp/asdf-minikube][minikube]]
     - [[https://github.com/Banno/asdf-hashicorp][terraform]] (recently combined
       support for multiple Hashicorp tools in one plugin)

**** Alternatives

     There are many alternative options for
     [[https://elixir-lang.github.io/install.html][installing Elixir]]. Here are
     a few in no particular order and with no specific endorsement:

     - Homebrew (~brew install erlang elixir node~)
     - [[https://nixos.org/nix/][Nix package manager]] and ~nix-shell~ (blog post forthcoming!)
     - [[https://github.com/taylor/kiex][kiex]] and [[https://github.com/yrashk/kerl][kerl]]

**** Software/Tool Versions

     | Software | Version |
     |----------+---------|
     | OSX      | 10.12.6 |
     | asdf     |   0.4.0 |
     | Elixir   |   1.5.3 |
     | Erlang   |  20.2.2 |
     | Node.js  |   9.3.0 |

**** Reference Links                                               :noexport:

     - https://github.com/asdf-vm/asdf/tree/8794210b8e7d87fcead78ae3b7b903cf87dcf0d6#setup
     - https://github.com/asdf-vm/asdf-erlang/issues/48#issuecomment-339137374

** Emacs                                                             :@emacs:
*** DONE Blogging with org-mode and ox-hugo      :hugo:netlify:org:spacemacs:
    CLOSED: [2018-02-13 Tue 12:30]
    :PROPERTIES:
    :EXPORT_DATE: 2018-02-13
    :EXPORT_FILE_NAME: blogging-with-org-mode-and-ox-hugo
    :END:

    I've recently assembled a workflow for blogging with [[https://gohugo.io/][Hugo]], [[http://orgmode.org/][org-mode]], and
    [[https://www.netlify.com/][Netlify]] via a single ~.org~ document, with live reload during writing and ~git
    push~ driven deployments.

    <!--more-->

**** Recommended Reading                                   :noexport:rewrite:

     Before pursing a workflow like this, you should be somewhat familiar with
     the separate behaviors of [[https://www.gnu.org/software/emacs/][Emacs]], [[http://orgmode.org/][org-mode]], org's [[http://orgmode.org/manual/Exporting.html#Exporting][Exporting]] functionality,
     and the [[https://gohugo.io][Hugo]] static site generator.

**** Requirements

     I've detailed my current environment in the
     [[#ox-hugo-software-tool-versions][Software/Tool Versions]] appendix below.
     Strictly speaking, the hard requirements of the
     [[https://melpa.org/#/ox-hugo][ox-hugo]] package are:

     - Emacs 24.4+
     - org-mode 9.0+

     To use the ~git~-based publishing part of this workflow, you'll also need:

     - A GitHub account (free or otherwise)
     - A Netlify account (free or otherwise)

**** Features

     - Compose and organize content in a single Org file
     - Each post automatically gets a Table of Contents if sub-headings are present
     - Preview in your local browser including live-reload behavior
     - Syntax highlighting, including custom line numbers and line highlights
     - Manage draft / publication status
     - Manage categories and tags
     - Manage post aliases
     - Manage custom front-matter
     - Publish via ~git push~, perhaps via [[https://magit.vc/][Magit]]
     - Free hosting via Netlify (dear Netlify, please let me give you money
       without a multi-user/Pro account!)
     - Free HTTPS via Netlify's Lets Encrypt integration

**** Installation

     I've included snippets for ~use-package~ users and Spacemacs users - others
     should look at the [[https://github.com/kaushalmodi/ox-hugo][repository]] for the ~ox-hugo~ package for more
     information.

***** ~use-package~ Users

      #+BEGIN_SRC emacs-lisp
        (use-package ox-hugo
          :after ox)
      #+END_SRC

***** Spacemacs Users

      Use @@html:<kbd>@@ SPC f e d @@html:</kbd>@@ to open ~~/.spacemacs~ (or
      ~~/.spacemacs/init.el~) and within the ~dotspacemacs/layers~ function, add or
      update an entry to the ~dotspacemacs-configuration-layers~ list like so:

      #+BEGIN_SRC emacs-lisp
        (org :variables
             org-enable-hugo-support t)
      #+END_SRC

      Restart Emacs or use @@html:<kbd>@@ SPC f e R @@html:</kbd>@@ to reload your
      configuration on-the-fly. If you already have an entry for the ~org~ layer,
      just include the variable ~org-enable-hugo-support~ with value ~t~.

**** Workflow
***** Project Structure

      I'm working within a vanilla Hugo project with the following structure,
      similar to what you'd see right after a ~hugo new site~ command:

      #+BEGIN_SRC sh
        $ tree -d -L 2
        .
        ├── archetypes
        ├── content
        │   ├── blog
        │   └── pages
        ├── data
        ├── layouts
        ├── static
        │   └── images
        └── themes
            └── hugo-redlounge
      #+END_SRC

      My ~blog.org~ file sits at the root of my repository, but could be placed
      nearly anywhere within and re-targeted with the ~HUGO_BASE_DIR~ setting.
      Subtrees get exported to a subdirectory of ~content~ based on their
      ~EXPORT_HUGO_SECTION~ property.

***** File Structure

      There are several options for organizing the ~.org~ file you store your
      blog posts and pages in, but here's a single-file structure that works
      well for me.

****** Global settings and metadata

       #+BEGIN_SRC org -n 1
         ,#+STARTUP: content
         ,#+AUTHOR: Shane Sveller
         ,#+HUGO_BASE_DIR: .
         ,#+HUGO_AUTO_SET_LASTMOD: t
       #+END_SRC

       Line 1 is an ~org-mode~ setting that tells Emacs that upon opening this
       file, default to showing all headings and subheadings but not the inner
       content until @@html:<kbd>@@ TAB @@html:</kbd>@@ is pressed while the
       pointer is on a particular heading.

       Line 2 sets my global author information, which propagates into each post
       and page I manage with this ~.org~ file.

       Line 3 tells ~ox-hugo~ that the current ~.org~ file is located in the
       root of the overall Hugo project, which means that exported data will
       be saved into the ~content~ directory and appropriate subdirectory that
       reside next to the ~.org~ file. Relative and absolute paths both work here.

       Finally line 4 tells ~ox-hugo~ to update the ~lastmod~ property of each
       exported item to match the current time and date, which can be reflected
       on your site in various ways based on your theme and configuration.

****** Creating a page
       :PROPERTIES:
       :END:

       #+BEGIN_SRC org -n 5
         ,* Pages
           :PROPERTIES:
           :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
           :EXPORT_HUGO_MENU: :menu main
           :EXPORT_HUGO_SECTION: pages
           :EXPORT_HUGO_WEIGHT: auto
           :END:
       #+END_SRC

       My ~.org~ file has a dedicated top-level Org heading to contain my ~Page~
       content, and this heading sets a number of shared *properties* that are
       inherited by the individual sub-headings representing each page.

       Line 7 includes multiple key-value pairs that get inserted as-is into the
       [[https://gohugo.io/content-management/front-matter/#front-matter-variables][Hugo
       front matter]]. It largely disables all the "frills" one might typically
       associate with a regular blog post - commenting, pagination, metadata, etc.

       Line 8 indicates that Hugo should include a link to this content on the
       ~main~ menu of my site, which is currently displayed on the left sidebar
       of every page.

       Line 9 tells ~ox-hugo~ to export the files into the ~/content/pages~
       subdirectory of my Hugo project, which has a slightly different Hugo
       template file than a standard blog post.

       Line 10 tells ~ox-hugo~ to manage the ~weight~ property of the Hugo
       front matter data. It will calculate the appropriate relative numbers to
       fill in during the export process.

       #+BEGIN_SRC org -n12
         ,** Page Title
            :PROPERTIES:
            :EXPORT_FILE_NAME: page-title
            :END:

            Page content
       #+END_SRC

       To create a new ~page~ on my Hugo site, I insert a new sub-heading under
       the ~Pages~ heading from the snippet just above. That heading's title is
       somewhat arbitrary, but this sub-heading will directly inform the ~title~
       of the exported content.

       Line 14 demonstrates the first truly required property,
       ~EXPORT_FILE_NAME~, with tells ~ox-hugo~ what filename under
       ~/content/pages~ to export this sub-tree to. Under my current settings
       this also directly determines the actual path portion of the resulting
       URL. For example, this one would be visible at ~/pages/page-title/~.

       Pages can include fairly arbitrary content below the sub-heading,
       including further sub-headings to break up a longer page or post. You can
       include links, images, and formatting, all using standard Org syntax.

****** Creating posts
       :PROPERTIES:
       :END:

       #+BEGIN_SRC org -n 19
         ,* Posts
           :PROPERTIES:
           :EXPORT_HUGO_SECTION: blog
           :END:
       #+END_SRC

       As with Pages above, I create a top-level Org heading to contain my
       standard blog posts.

       Line 20 configures ~ox-hugo~ to export any sub-headings to
       ~/content/blog~ in my Hugo project, versus ~pages~ above.

      #+BEGIN_SRC org -n 23
        ,** Topic                                                             :@topic:
      #+END_SRC

      I sort my posts into categories by topic and create sub-headings for each
      topic, and assign Org tags to each sub-heading that are prefixed with ~@~.
      Org tags on a post that have an ~@~ prefix will generate a ~category~
      entry in the exported front matter, which is one of the [[https://gohugo.io/content-management/taxonomies/#hugo-taxonomy-defaults][default taxonomies]]
      built into a new Hugo project. Org tags are inherited from parent headings
      by sub-headings, so all further subheadings under this subheading will
      include the ~@topic~ tag.

      #+BEGIN_SRC org -n 24
        ,*** DONE Post Title                                               :post:tags:
            CLOSED: [2017-12-19 Tue 17:00]
            :PROPERTIES:
            :EXPORT_DATE: 2017-12-19
            :EXPORT_FILE_NAME: post-title-in-slug-form
            :END:
      #+END_SRC

      This sub-heading begins a new post, and is marked as *DONE* in Org syntax
      with a *CLOSED* timestamp. It also has Org tags named ~post~ and ~tags~
      which will be inserted into the exported front matter as ~tags~. It
      includes an ~EXPORT_DATE~ property, which would be used as the post's
      publication date in the absense of the *CLOSED* timestamp on line 25.
      Finally it includes the same ~EXPORT_FILE_NAME~ property as mentioned
      above under Page management.

      #+BEGIN_SRC org -n31
        Content

        More content

        ,#+BEGIN_SRC bash -l 7 :hl_lines 8
          echo 'Some source code content'
          echo 'This line will be highlighted'
          echo "This one won't"
        ,#+END_SRC
      #+END_SRC

      This snippet demonstrates the syntax needed to include a
      syntax-highlighted code snippet within a post. You can quickly start a
      code block with @@html:<kbd>@@ < s TAB @@html:</kbd>@@.

      If you append a valid language to ~#+BEGIN_SRC~, and your copy of Emacs
      has an associated major mode that is named ~$language-mode~, you'll get
      automatic syntax highlighting while composing the post, and the exported
      markdown will include either the ~highlight~ [[https://gohugo.io/content-management/syntax-highlighting/#highlight-shortcode][shortcode]] or [[https://gohugo.io/content-management/syntax-highlighting/#highlight-in-code-fences][Markdown "code
      fences"]]. As an added bonus, you can use ~org-edit-special~ (@@html:<kbd>@@
      , ' @@html:</kbd>@@ for Spacemacs or @@html:<kbd>@@ C-c ' @@html:</kbd>@@
      for vanilla Emacs) to open a new popover window that lets you edit that
      code snippet in a separate Emacs buffer. This will behave nearly
      identically to editing a standalone file with that major mode, including
      any extra behavior like auto-complete, linting, etc.

****** Excluding/heading sub-headings from export

       On some posts I like to create a private space to jot down ad hoc notes,
       research and reference links, unrefined code snippets, etc. that
       shouldn't appear in the final product but are useful to me during the
       writing process. By configuring the ~org-export-exclude-tags~ variable,
       or an ~EXCLUDE_TAGS~ file variable, then inserting a matching Org tag on
       a sub-heading, that content will not appear in the exported Markdown or
       in the published post, but will remain intact in the original ~.org~
       file. In my case, it's a ~:noexport:~ tag.

****** Automatic export on save

       The ox-hugo site includes [[https://ox-hugo.scripter.co/doc/auto-export-on-saving/][great documentation]] for adding a local variable
       to your ~.org~ file to enable automatic "what I mean" export whenever you
       save the file.

       The resulting syntax after following these instructions is:

       #+BEGIN_SRC org -n 51
         ,* Footnotes
         ,* COMMENT Local Variables                                           :ARCHIVE:
         # Local Variables:
         # eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
         # eval: (auto-fill-mode 1)
         # End:
       #+END_SRC

****** Full Sample

      #+BEGIN_SRC org -n 1 :hl_lines 3,4,7,9,10,21,24-29,35-39,44,51-56
        ,#+STARTUP: content
        ,#+AUTHOR: Shane Sveller
        ,#+HUGO_BASE_DIR: .
        ,#+HUGO_AUTO_SET_LASTMOD: t
        ,* Pages
          :PROPERTIES:
          :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
          :EXPORT_HUGO_MENU: :menu main
          :EXPORT_HUGO_SECTION: pages
          :EXPORT_HUGO_WEIGHT: auto
          :END:
        ,** Page Title
           :PROPERTIES:
           :EXPORT_FILE_NAME: page-title
           :END:

           Page content

        ,* Posts
          :PROPERTIES:
          :EXPORT_HUGO_SECTION: blog
          :END:
        ,** Topic                                                             :@topic:
        ,*** DONE Post Title                                               :post:tags:
            CLOSED: [2017-12-19 Tue 17:00]
            :PROPERTIES:
            :EXPORT_DATE: 2017-12-19
            :EXPORT_FILE_NAME: post-title-in-slug-form
            :END:

            Content

            More Content

            ,#+BEGIN_SRC bash -l 7 :hl_lines 8
              echo 'Some source code content'
              echo 'This line will be highlighted'
              echo "This one won't"
            ,#+END_SRC

        ,**** Post Sub-Heading
             This is another section within the post.

        ,*** TODO Draft Post Title
            :PROPERTIES:
            :EXPORT_FILE_NAME: draft-post-title
            :END:

            This article *will* be exported but will be marked ~draft = true~ in the front matter.

        ,* Footnotes
        ,* COMMENT Local Variables                                           :ARCHIVE:
        # Local Variables:
        # eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
        # eval: (auto-fill-mode 1)
        # End:
      #+END_SRC

***** Marking a post as a Draft

      To create a new draft post, add a new heading or subheading, and set it to
      *TODO* status, perhaps via ~M-x org-todo~ or @@html:<kbd>@@ C-c C-t
      @@html:</kbd>@@.

      *TODO* status ensures that the post will be rendered to Markdown with
      ~draft = true~ in its frontmatter, which configures Hugo itself to prevent
      a premature publish of the article to your live site unless specifically
      instructed to include draft content.

      /A heading without *TODO* or *DONE* is *not* considered a draft/.

***** Publishing a Draft

      To publish a draft post, toggle its *TODO* state to *DONE*. If you have
      ~org-log-done~ set to ~'time~, toggling to *DONE* automatically adds a
      *CLOSED:* timestamp that will be respected in favor of ~EXPORT_DATE~
      property for setting the ~date~ in the rendered post's front matter.

***** Creating a draft with =org-capture=                          :noexport:

***** Optional: Live reload without a separate shell tab
      :PROPERTIES:
      :CUSTOM_ID: prodigy-hugo-service
      :END:

      If you enable the ~prodigy~ layer in Spacemacs, or install the ~Prodigy~
      package manually, you can define a process in your
      ~dotspacemacs/user-config~ function like so:

      #+BEGIN_SRC emacs-lisp -n1
        (prodigy-define-service
          :name "Hugo Personal Blog"
          :command "/usr/local/bin/hugo"
          :args '("server" "-D" "--navigateToChanged" "-t" "hugo-redlounge")
          :cwd "~/src/shanesveller-dot-com"
          :tags '(personal)
          :stop-signal 'sigkill
          :kill-process-buffer-on-stop t)
      #+END_SRC

      Then, to manage the process while editing with Emacs, I use @@html:<kbd>@@ SPC a
      S @@html:</kbd>@@ to open the Prodigy buffer, highlight the service entry, and
      use @@html:<kbd>@@ s @@html:</kbd>@@ to start the process, @@html:<kbd>@@ S
      @@html:</kbd>@@ to stop the service, and @@html:<kbd>@@ $ @@html:</kbd>@@ to
      view process output. @@html:<kbd>@@ q @@html:</kbd>@@ will back out of any
      Prodigy-generated buffers.

***** TODO Bonus: Publishing Your Blog With Netlify                :noexport:

**** Room for Improvement                                          :noexport:

     /Ed: These are candidates for inclusion before this post goes live./

     - Linking to headings, other posts, and headings in other posts
       (~CUSTOM_ID~ property seems to work within a document)
     - Emacs-lisp function to view Netlify preview URL by Git SHA
     - Emacs-lisp function to open your browser when opening the ~.org~ file and
       Hugo is running
     - [[https://ox-hugo.scripter.co/doc/images-in-content/][Screenshot capture workflow]]
     - [[http://orgmode.org/worg/org-contrib/org-protocol.html][Org-protocol workflow]]
     - [[https://ox-hugo.scripter.co/doc/org-capture-setup/][Org-capture templates]]
     - CI workflow if not using the Netlify / GitHub webhooks integration

**** Software/Tool Versions
     :PROPERTIES:
     :CUSTOM_ID: ox-hugo-software-tool-versions
     :END:

     | Software  |       Version |
     |-----------+---------------|
     | Emacs     |        25.3.1 |
     | Spacemacs |       0.300.0 |
     | Org       |         9.1.2 |
     | Hugo      |        0.31.1 |
     | ox-hugo   | 20171026.1402 |
     | prodigy   | 20170816.1114 |

**** Emacs Lisp Snippets

     Here's a snippet that can build off of [[#prodigy-hugo-service][the Prodigy service snippet]] to
     automatically visit your local Hugo server in a browser once it's running.

     I'm still learning emacs-lisp, and will probably find in the future that
     this style doesn't suit me, particularly the trailing parentheses.

     I'd also like to investigate ~defcustom~ to allow these default values to
     be more configurable.

     #+BEGIN_SRC emacs-lisp
       (defun browse-hugo-maybe ()
         (interactive)
         (let ((hugo-service-name "Hugo Personal Blog")
               (hugo-service-port "1313"))
           (if (prodigy-service-started-p (prodigy-find-service hugo-service-name))
               (progn
                 (message "Hugo detected, launching browser...")
                 (browse-url (concat "http://localhost:" hugo-service-port))))))
     #+END_SRC

**** Credits

Thank you to [[https://twitter.com/jrnt30][Justin Nauman]] for great feedback on an early version of this
article. Any remaining flaws are my own.

**** Reference Links                                               :noexport:
     - https://www.netlify.com/docs/continuous-deployment/#common-configuration-directives
     - https://github.com/kaushalmodi/ox-hugo/blob/dffb7e970f33959a0b97fb8df267a54d01a98a2a/ox-hugo.el#L2570
**** Emacs-Lisp Scratch Pad                                        :noexport:

     #+BEGIN_SRC emacs-lisp
       (defun browse-hugo-maybe ()
         (interactive)
         (let ((hugo-service-name "Hugo Personal Blog")
               (hugo-service-port "1313"))
           (if (prodigy-service-started-p (prodigy-find-service hugo-service-name))
               (progn
                 (message "Hugo detected, launching browser...")
                 (browse-url (concat "http://localhost:" hugo-service-port))))))

       (defun current-magit-commit ()
         (interactive)
         (progn
           (message "Current file: %s" (buffer-file-name))
           (message "Current file status: %s" (vc-working-revision (buffer-file-name)))
           (let '(short-name "shanesveller-dot-com")
             (browse-url (format "https://%s--%s.netlify.com" (truncate-string-to-width (vc-working-revision (buffer-file-name)) 24) short-name))
             )
           )
         )

       ;; https://5a3998c20b79b7514937073d--shanesveller-dot-com.netlify.com/
       ;; 5a3998c20b79b7514937073d

       (defun toolbox ()
         (interactive)

         (save-excursion
           (org-back-to-heading :invisible-ok)
           (let* (
                  (this-element (org-element-at-point))
                  (prop-name :EXPORT_FILE_NAME)
                  (element-prop (org-element-property prop-name this-element))
                  )
             (message "%s" element-prop)
             )
           )
         )

       (defun format-subtree-permalink (date filename)
         (let* (
                (split-date (split-string date "-"))
                (date-year (nth 0 split-date))
                (date-month (nth 1 split-date))
                (date-day (nth 2 split-date))
                )
           (message "%s/%s/%s/%s" date-year date-month date-day filename)
           )
         )

       (defun destructure-test (date filename)
         (require 'cl)
         (destructuring-bind (date-year date-month date-day)
             (split-string date "-")
           (message "%s/%s/%s/%s" date-year date-month date-day filename)
           )
         )

       ;; (destructure-test "2017-12-29" "my-filename")

       ;; https://5a3af02a4c4b932e03d474a9--shanesveller-dot-com.netlify.com/
       (defun browse-netlify-branch-deploy (git-sha site-name &optional sub-path)
         (let* (
                (netlify-proto "https")
                (netlify-hostname "netlify.com")
                (netlify-url-format "%s://%s--%s.%s%s")
                )
           ;; (browse-url (format netlify-url-format netlify-proto git-sha site-name netlify-hostname (or sub-path "")))
           (message netlify-url-format netlify-proto git-sha site-name netlify-hostname (or sub-path ""))
           )
         )

       (browse-netlify-branch-deploy "5a3af02a4c4b932e03d474a9" "shanesveller-dot-com")

       ;; https://www.shanesveller.com/blog/2017/12/19/blogging-with-org-mode-and-ox-hugo/
       (defun my/preview-post-on-netlify ()
         (interactive)

         (save-excursion
           (ignore-errors
             (org-back-to-heading :invisible-ok))
           (let* (
                  (post-element (org-hugo--get-valid-subtree))
                  (post-filename (org-element-property :EXPORT_FILE_NAME post-element))
                  ;; (upstream (magit-get-upstream-remote))
                  ;; (remote-url (magit-git-string "remote" "get-url" upstream))
                  ;; (remote-components (split-string remote-url "/"))
                  ;; (raw-repo (car (last remote-components)))
                  ;; (repo (replace-regexp-in-string "\.git$" "" raw-repo))
                  (branch (magit-get-current-branch))
                  (upstream-remote (magit-get-upstream-remote branch))
                  (upstream-branch (magit-get-upstream-branch branch))
                  ;; (sanitized-branch (url-hexify-string branch))
                  (git-sha (magit-rev-parse-safe upstream-branch))
                  (sub-path (format "/blog/%s/%s/%s/%s/" "2017" "12" "19" "blogging-with-org-mode-and-ox-hugo"))
                  )
             (message "%s/%s/%s/%s" branch upstream-remote upstream-branch (magit-get-upstream-ref branch))
             ;; (message "%s" (browse-netlify-branch-deploy git-sha "shanesveller-dot-com" sub-path))
             )
           )
         )
     #+END_SRC

** Productivity                                               :@productivity:
*** TODO Managing shell dotfiles with thoughbot's rcm  :@shells:dotfiles:rcm:
    :PROPERTIES:
    :EXPORT_FILE_NAME: managing-shell-dotfiles-with-thoughtbots-rcm
    :END:

** Terraform                            :@terraform:infrastructure__as__code:
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** DONE Managing GitLab groups and projects with Terraform          :gitlab:
    CLOSED: [2017-12-17 Sun 11:26]
    :PROPERTIES:
    :EXPORT_DATE: 2017-12-17
    :EXPORT_FILE_NAME: managing-gitlab-with-terraform
    :END:

    I've begun using GitLab to host some of my personal projects on my own
    domain, sometimes as a mirror of a GitHub repository and sometimes as the
    primary home of the project.

    <!--more-->

**** Configuring the provider

     The following Terraform syntax can be used with the public/commercial
     GitLab.com service or with a self-hosted installation, as long as you have
     network connectivity and a token with the correct permissions. I'm using
     the latter.

     In my case, I used a *Personal Access Token* associated with my individual
     administrative account, with these permissions:

     - ~api~
     - ~read_user~

     #+BEGIN_SRC hcl
       variable "gitlab_token" {
         type    = "string"
         default = "hunter2"
       }

       variable "gitlab_url" {
         type    = "string"
         default = "https://gitlab.mydomain.com/api/v4/"
       }

       provider "gitlab" {
         base_url = "${var.gitlab_url}"
         token    = "${var.gitlab_token}"
         version  = "~> 1.0.0"
       }
     #+END_SRC

     If you'd like to keep these out of your source code, Terraform also allows
     setting variables in shell environment variables by prefixing them with
     ~TF_VAR_~, as in ~TF_VAR_gitlab_token~ and ~TF_VAR_gitlab_url~. You can
     manage these manually or with a tool like [[https://direnv.net/][direnv]],
     and keep the latter's ~.envrc~ file in your ~.gitignore~.

**** Creating a group

     #+BEGIN_SRC hcl
       resource "gitlab_group" "blogs" {
         name        = "blogs"
         path        = "blogs"
         description = "Public blog repositories"
       }
     #+END_SRC

***** Creating a nested group

      I have a group on my GitLab site for ~infrastructure~ projects, and a
      nested group on my site for [[https://helm.sh/][Helm]] charts within that ~infrastructure~
      group. Here's the Terraform code that manages those two groups and their
      relationship:

      #+BEGIN_SRC hcl
        resource "gitlab_group" "infrastructure" {
          name        = "infrastructure"
          path        = "infrastructure"
        }

        resource "gitlab_group" "helm-charts" {
          name        = "helm-charts"
          path        = "helm-charts"
          parent_id   = "${gitlab_group.infrastructure.id}"
        }
      #+END_SRC

      Projects created within this child group will appear on the site at
      paths that look like ~/infrastructure/helm-charts/foo-chart~.

**** Creating a project within a group

     Here's an example, a mirror of my public blog that is hosted on GitHub as
     well. Because of the nature of its contents, I've disabled most of the
     extra features offered by GitLab for this particular repository.

     #+BEGIN_SRC hcl :hl_lines 2,7
       resource "gitlab_project" "blogs-shanesveller-dot-com" {
         name                   = "shanesveller-dot-com"
         default_branch         = "master"
         description            = ""
         issues_enabled         = false
         merge_requests_enabled = false
         namespace_id           = "${gitlab_group.blogs.id}"
         snippets_enabled       = false
         visibility_level       = "public"
         wiki_enabled           = false
       }
     #+END_SRC

     With the highlighted lines in place, the repository path on the site
     becomes ~/blogs/shanesveller-dot-com~.

**** Closing Comments

     The GitLab provider as of 1.0.0 is missing some API coverage for what
     GitLab offers, and has some bugs associated with things like a project's
     default branch. Often I use ~git-flow~ and want to set a project's default
     branch to ~develop~, but that feature does not currently seem to work
     reliably due to
     [[https://github.com/terraform-providers/terraform-provider-gitlab/pull/41][this
     code typo]].

**** Software/Tools Versions
     :PROPERTIES:
     :CUSTOM_ID: gitlab-terraform-software-tools-versions
     :END:

     | Software                  | Version |
     |---------------------------+---------|
     | GitLab                    |  10.2.4 |
     | Terraform                 |  0.10.7 |
     | Terraform GitLab Provider |   1.0.0 |

**** Reference Links                                               :noexport:

     - https://www.terraform.io/docs/providers/gitlab/index.html

* Page Ideas                                                       :noexport:
  :PROPERTIES:
  :VISIBILITY: content
  :END:
** Networking                                                   :@networking:
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** TODO Home Network
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_FILE_NAME: home-network
    :END:

My home network is largely made up of Ubiquiti Unifi equipment.

**** Router

My router is a UBNT USG 3-port. I also own a 4-port USG Pro but cannot currently
tolerate the fan noise in an apartment, so that's still in the box.

**** Switching

I have a UBNT 24-port 250W POE switch for my main hub, as well as a UBNT 8-port
switch with POE passthrough for my TV stand so I can hard-wire my game consoles and
media devices.

* Post Ideas                                                       :noexport:

** Elixir                                                           :@elixir:
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** TODO Managing Elixir runtime version with Nix                :elixir:nix:
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_DATE: 2017-12-15
    :EXPORT_FILE_NAME: managing-elixir-runtime-version-with-nix
    :END:

 I've experimented recently with managing multiple versions of Erlang and Elixir with Nix.

 <!--more-->

**** Software/Tool Versions

 | Software | Verison |
 |----------+---------|
 | OSX      | 10.12.6 |
 | Nix      | 1.11.16 |

**** Installation

 #+BEGIN_SRC shell-script
 brew cask install nix
 #+END_SRC

**** Getting Started

**** References

** Emacs                                                             :@emacs:
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** TODO Spaced repitition with =org-drill=                       :education:
    :PROPERTIES:
    :EXPORT_DATE: 2017-12-17
    :EXPORT_FILE_NAME: org-drill
    :END:

    My team at [[https://www.raise.com/][work]] has previously used
    [[http://orgmode.org/worg/org-contrib/org-drill.html][org-drill]] to study
    less-familiar subjects, initially focused on Kubernetes during our early
    adoption process. Its documentation is largely excellent, but here's a few
    extra details we've learned over time.

**** Installation

     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'org
         (require 'cl)
         (require 'org-drill))
     #+END_SRC

**** Usage
***** Creating cards
****** Single File
       Here's what the raw ~org~ source looks like:

       #+BEGIN_SRC org
         ,* Cards

         ,** Card 1                                                             :drill:

         ,*** Card 1 Answer
       #+END_SRC
****** Directory of Files
**** Software/Tools Versions
     :PROPERTIES:
     :CUSTOM_ID: org-drill-software-tools-versions
     :END:

     | Software  | Version |
     |-----------+---------|
     | Emacs     |  25.3.1 |
     | Spacemacs | 0.300.0 |
     | Org       |   9.1.2 |
**** Reference Links                                               :noexport:
     - http://orgmode.org/worg/org-contrib/org-drill.html
*** TODO Presentations with org-mode and org-reveal :org:mode:presentation:reveal_js:slideshow:
    :PROPERTIES:
    :EXPORT_DATE: 2017-12-26
    :EXPORT_FILE_NAME: presentations-with-org-mode-and-org-reveal
    :END:

** Kubernetes                                                   :@kubernetes:
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** TODO Allowing HTTP traffic with nginx-ingress
*** TODO Securing HTTPS traffic with cert-manager
*** TODO Monitoring GKE with CoreOS' Prometheus Operator :coreos:monitoring:prometheus:gke:kubernetes:
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_FILE_NAME: monitoring-gke-with-coreos-prometheus-operator
    :EXPORT_HUGO_WEIGHT: auto
    :END:

**** Background

 [[https://prometheus.io/][Prometheus]] is all the rage in the Kubernetes community, especially after
 becoming a Cloud Native Computing Foundation [[https://www.cncf.io/projects/][hosted project]].

 CoreOS has a project called [[https://github.com/coreos/prometheus-operator][prometheus-operator]] which helps manage instances
 of a Prometheus server, or its compatriot AlertManager, via Kubernetes manifests.

**** Getting Started

 I've chosen to install the Operator via the project's provided [[https://github.com/coreos/prometheus-operator/tree/v0.15.0/helm/prometheus-operator][Helm Chart]].

 First, install CoreOS' Helm repository

 #+BEGIN_SRC shell-script
   helm init --client-only
   helm repo add coreos https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/
 #+END_SRC

 I've also provided some customized values:

 #+BEGIN_SRC yaml
   global:
     ## Hyperkube image to use when getting ThirdPartyResources & cleaning up
     ##
     hyperkube:
       repository: quay.io/coreos/hyperkube
       # https://quay.io/repository/coreos/hyperkube?tag=latest&tab=tags
       tag: v1.8.4_coreos.0
       pullPolicy: IfNotPresent

   ## Prometheus-operator image
   ##
   image:
     repository: quay.io/coreos/prometheus-operator
     # https://quay.io/repository/coreos/prometheus-operator?tag=latest&tab=tags
     tag: v0.15.0
     pullPolicy: IfNotPresent
 #+END_SRC

 Finally, I install the chart with my supplied values in a ~monitoring~ namespace:

 #+BEGIN_SRC shell-script
   helm install --name prometheus-operator \
        --namespace monitoring \
        --values prometheus-operator-values.yaml \
        coreos/prometheus-operator
 #+END_SRC

**** Using kube-prometheus for basic cluster metrics

 #+BEGIN_SRC shell-script
   helm install --name kube-prometheus \
        --namespace monitoring \
        --values kube-prometheus-values.yaml \
        coreos/kube-prometheus
 #+END_SRC

**** Software/Tool Versions

 | Project                   |     Version |
 |---------------------------+-------------|
 | Google Cloud SDK          |     182.0.0 |
 | Kubernetes                | 1.8.3-gke.0 |
 | Helm                      |       2.7.2 |
 | Prometheus Operator       |      0.15.0 |
 | Prometheus Operator Chart |       0.0.7 |
 | Prometheus                |       1.8.2 |

*** TODO Building and testing software with Jenkins on Kubernetes
** Shell Programming                                                :@shells:
   :PROPERTIES:
   :VISIBILITY: children
   :END:
*** Fish Shell                                                        :@fish:
    :PROPERTIES:
    :VISIBILITY: children
    :END:
**** TODO Getting your feet wet with Fish Shell
     :PROPERTIES:
     :EXPORT_AUTHOR: Shane Sveller
     :EXPORT_FILE_NAME: getting-your-feet-wet-with-fish-shell
     :EXPORT_HUGO_WEIGHT: auto
     :END:

***** Software/Tool Versions

 | Software   | Version |
 |------------+---------|
 | OSX        | 10.12.6 |
 | iTerm 2    |   3.1.5 |
 | Fish       |   2.7.0 |
 | Oh My Fish |       6 |

***** Installation

 #+BEGIN_SRC shell-script
   brew install fish
 #+END_SRC

 Now, install oh-my-fish via ~git~ because curl-bash is for suckers!

 #+BEGIN_SRC shell-script
   git clone https://github.com/oh-my-fish/oh-my-fish
   cd oh-my-fish
   bin/install --offline
 #+END_SRC

* Footnotes
* COMMENT Local Variables                                                   :ARCHIVE:
  # Local Variables:
  # eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md :append :local)
  # eval: (auto-fill-mode 1)
  # End:
