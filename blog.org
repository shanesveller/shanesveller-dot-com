#+STARTUP: content
#+TITLE: Shane Sveller
#+AUTHOR: Shane Sveller
#+HUGO_BASE_DIR: .
#+HUGO_AUTO_SET_LASTMOD: t

* Pages
  :PROPERTIES:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
  :EXPORT_HUGO_MENU: :menu main
  :EXPORT_HUGO_SECTION: pages
  :END:

** DONE Hardware                                                  :@hardware:
   CLOSED: [2017-12-17 Sun 11:00]
   :PROPERTIES:
   :EXPORT_FILE_NAME: hardware
   :END:

My current custom-built gaming PC is as follows:

- Fractal Design R5 Black case
- Gigabyte GA-Z170X-Gaming GT motherboard
- Intel Core i7-6700k (Skylake) at 4.0GHz
- Corsair H110i GT liquid CPU cooler
- 32GB (4x8GB) Crucial Ballistix Elite DDR4-2666 RAM
- EVGA GeForce GTX 980 Superclocked 4GB
- Samsung 950 Pro 256GB m.2 solid-state drive
- Samsung 850 Pro 512GB solid-state drive
- Western Digital Red 1TB 7200rpm hard drive (2)
- Windows 10 Pro x64
- Razer Naga mouse
- Razer Black Widow Chroma keyboard
- LG 34UM95-P 34" Ultrawide monitor
- Logitech Z-2300 speakers

I do all of my professional/hobby development work on:

- Mid-2015 Retina MacBook Pro
- 16GB DDR3-1600
- 2.8 GHz Intel Core i7
- 500GB Apple/Samsung PCI-E solid-state drive
- OSX 10.11 El Capitan

I have a file server:

- Synology 1513+
- Western Digital Red 4TB 7200rpm hard drive (5)

I have an Intel NUC virtualization server:

- Intel Skull Canyon NUC 6i7KYK
- 2x16GB CRUCIAL 16GB DDR4 2400 BL SODIMM
- 2x CRUCIAL 500GB MX200 SS SSD M.2

I also have a SmartOS/SDC virtualization server:

- Lenovo ThinkServer TS140
- Intel Xeon E3-1225 v3 3.2GHz
- 32GB (4x8GB) Crucial ECC DDR3-1600
- Western Digital Red 1TB 7200rpm (3)
- Intel I340-T4 (PCIE 2.0 x 4 lane, 4x1Gb NIC)

** TODO Software and Services
   :PROPERTIES:
   :EXPORT_FILE_NAME: software-and-services
   :EXPORT_DATE: 2012-08-05
   :END:

   In no particular order, I endorse the following software, products and
   services on a personal level:

*** OSX Software

    - [[http://adium.im/][Adium]]
    - [[http://sprw.me/][Sparrow]] - no new development due to acquisition
      by Google is heartbreaking
    - [[http://mac.github.com][GitHub OSX client]]
    - [[http://reederapp.com/mac/][Reeder]] - Best RSS reader I've ever
      used, and it has a fantastic [[http://reederapp.com/ipad/][iOS port]]!
    - [[http://tapbots.com/tweetbot_mac/][TweetBot]] - Originally on
      [[http://tapbots.com/software/tweetbot/][iOS]], and is far and away my
      preferred Twitter client on both platforms. Beats the hell out of
      TweetDeck.
    - [[http://www.iterm2.com][iTerm 2]]
    - [[http://tmux.sourceforge.net][tmux]] - not OSX specific, but where I
      use it most

*** Cross-platform Software

    - [[http://dropbox.com/][Dropbox]] - still one of my favorite ways to
      keep files available on all my machines, including the iPad. Bonus:
      integration with
      [[http://pragprog.com/frequently-asked-questions/ebooks/read-on-desktop-laptop#dropbox][PragProg]]
      and
      [[http://shop.oreilly.com/category/customer-service/dropbox.do][O'Reilly]]
      for near-instant notificaiton of new e-book revisions!
    - [[http://sublimetext.com/2][SublimeText 2]] - see my 1-month
      impressions [[/posts/2012-08-05-sublimetext-2/][here]]!
    - [[http://spotify.com/][Spotify]] - the only streaming music service
      I'm still consistently glad I subscribe to. Works like a charm on
      Windows and OSX, and even has a
      [[http://spotify.com/us/download/previews/][Linux port]]!
    - [[https://kindle.amazon.com][Amazon Kindle]] - my preferred e-reader
      platform because it has great dedicated
      [[https://www.amazon.com/kindle-store-ebooks-newspapers-blogs/b/ref=r_ksl_h_i_gl?node=133141011][hardware
      readers]], and a reading app for pretty much
      [[https://www.amazon.com/gp/kindle/kcp/ref=r_kala_h_i_gl][every
      platform under the sun]].

*** Cloud/Web Apps

    - [[http://heroku.com/][Heroku]]
    - [[http://mint.com/][Mint]]
    - [[http://pinboard.in/][Pinboard]] - bookmarking service /ala/
      Delicious but without all the social trappings - and with great
      integration in Twitter clients/RSS readers!
    - [[http://pandora.com/][Pandora]] - I'm less happy with their variety
      than I wish, but still a great service

*** Screencasts

    - [[http://railscasts.com/][Railscasts]] - Ryan Bates has been
      consistently putting out focused, concise and informative screencasts
      on a variety of topics related to Ruby on Rails or programming at
      large. Congrats on a full year of doing RailsCasts full-time, Ryan!
      Happy to be a Pro subscriber.
    - [[https://peepcode.com/][PeepCode]] - May be less prolific than
      Railscasts, but the screencasts Geoffrey puts out are very meaty and
      I'm a big fan of the
      [[https://peepcode.com/products/play-by-play-tenderlove-ruby-on-rails][Play
      by Play series]].

*** Podcasts

    - [[http://ruby5.envylabs.com/][Ruby5]] is a great way to keep abreast
      of new or upcoming projects from the Ruby ecosystem
    - [[http://rubyrogues.com/][Ruby Rogues]] isn't nearly so bite-sized but
      dives deeper into subjects and often has very interesting guests

*** Reference Books

    - [[http://pragprog.com/][Pragmatic Programmers]] keeps publishing
      awesome books from great authors on exciting topics
    - [[http://www.manning.com/][Manning]] - I still buy the odd
      [[http://www.manning.com/about/meap][MEAP book]] on an upcoming
      technology and have yet to regret it
    - O'Reilly publishes most new books in an ebook format and sports
      integration with Dropbox for delivery of updated versions

*** E-Book Vendors

    - [[http://rpg.drivethrustuff.com/][DriveThruRPG]] has awesome sales on
      tabletop RPG rulebooks now and then - I've got a ton of
      [[http://www.white-wolf.com/classic-world-of-darkness][old]]/
      [[http://www.white-wolf.com/new-world-of-darkness][new World of
      Darkness]] and [[http://shadowrun4.com/][Shadowrun]], some
      Exalted/Trinity, and a dash of [[http://paizo.com/][Pathfinder]].

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:

** Elixir                                                           :@elixir:
*** DONE Managing Elixir runtime version with ~asdf~     :asdf:elixir:erlang:
    CLOSED: [2017-12-23 Sat 22:30]
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_DATE: 2017-12-23
    :EXPORT_FILE_NAME: managing-elixir-runtime-version-with-asdf
    :END:

    An uncomfortably common problem when developing for a particular programming
    language is needing to deal with compatibility issues across different
    versions of the language runtime. Most often this means keeping individual
    projects tied to their then-current version of the language until such time
    that the project can address any compatibility issues with later language
    releases. To that end, Ruby developers are probably familiar with
    one of ~rbenv~, ~chruby~ or ~rvm~, for example. Elixir isn't much different
    in this regard.

    <!--more-->

    One available project that I find pretty promising is ~asdf~, which is
    self-described as:

    #+BEGIN_QUOTE
    [An] extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more
    #+END_QUOTE

    It fulfills some of the same roles that ~rbenv~ and friends do, while
    supporting multiple languages and even other software tools in a fairly
    standardized way.

**** Installation

***** Homebrew

     #+BEGIN_SRC sh
       brew install asdf
     #+END_SRC

     Follow the instructions in the output, which you can read again with ~brew
     info asdf~ if you missed them. As of this writing, those instructions are:

     #+BEGIN_QUOTE
     Add the following line to your bash profile (e.g. ~/.bashrc, ~/.profile, or ~/.bash_profile)

     =source /usr/local/opt/asdf/asdf.sh=

     If you use Fish shell, add the following line to your fish config (e.g. ~/.config/fish/config.fish)

     =source /usr/local/opt/asdf/asdf.fish=
     #+END_QUOTE

***** Git

      You can follow the latest manual installation instructions from the
      project's [[https://github.com/asdf-vm/asdf/tree/8794210b8e7d87fcead78ae3b7b903cf87dcf0d6#setup][README]], but today it includes:

      #+BEGIN_SRC sh
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.0

        # install shell hooks
        # I personally prefer `source` to `.`

        # bash users
        echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bash_profile
        echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> ~/.bash_profile

        # zsh users
        echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.zshrc
        echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> ~/.zshrc

        # fish users
        echo 'source ~/.asdf/asdf.fish' >> ~/.config/fish/config.fish
        mkdir -p ~/.config/fish/completions; and cp ~/.asdf/completions/asdf.fish ~/.config/fish/completions
      #+END_SRC

****** Prerequisites

       At the time of writing, here are the prerequisites recommended to use
       ~asdf~, which can be installed with [[https://brew.sh/][Homebrew]]:

       #+BEGIN_SRC sh
         brew install autoconf automake coreutils \
              libtool libxslt libyaml openssl \
              readline unixodbc
       #+END_SRC

***** Install required asdf plugins

      You can check the available plugins, based on the open-source plugin index [[https://github.com/asdf-vm/asdf-plugins][here]]:

      #+BEGIN_SRC sh
        asdf plugin-list-all
      #+END_SRC

      After identifying desirable plugins:

     #+BEGIN_SRC sh
       asdf plugin-install erlang
       asdf plugin-install elixir
       # phoenix users will likely also want:
       asdf plugin-install nodejs
     #+END_SRC

**** Usage

     To install the latest Erlang and Elixir versions at the time of writing:

     #+BEGIN_SRC sh
       asdf install erlang 20.2
       asdf install elixir 1.5.3
     #+END_SRC

     Phoenix users will also want:

     #+BEGIN_SRC sh
       asdf list-all nodejs
       asdf install nodejs 9.3.0
     #+END_SRC

***** Checking available tool versions

      You can see what versions ~asdf~ currently supports for installation with
      this command:

      #+BEGIN_SRC sh
        # asdf list-all [plugin]
        asdf list-all erlang
        asdf list-all elixir
        asdf list-all nodejs
      #+END_SRC

      Each plugin is able to implement this behavior in its own way, so their
      behavior may vary. Some are able to directly examine the releases of the
      upstream language project, others require manual support within the ~asdf~
      plugin in question, and so may lag behind new releases.

***** Installing a specific Erlang patch version

     The author of ~asdf~, @HashNuke on GitHub, cleared up in [[https://github.com/asdf-vm/asdf-erlang/issues/48#issuecomment-339137374][this GitHub issue]]
     that any tagged release of Erlang can be installed with ~asdf-erlang~:

     #+BEGIN_QUOTE
     We already support it. You can do the following:

     =asdf install erlang ref:OTP-20.1.2=

     Where OTP-20.1.2 is a valid tag that you can find on
     https://github.com/erlang/otp/releases. You can also specify a commit sha
     or branch name if you insist on the latest super-powers.
     #+END_QUOTE

     As of this writing the latest release is [[https://github.com/erlang/otp/releases/tag/OTP-20.2.2][20.2.2]], so that can be installed
     like so:

     #+BEGIN_SRC sh
       asdf install erlang ref:OTP-20.2.2
       # set global default
       asdf global erlang ref:OTP-20.2.2
     #+END_SRC

***** Installing Elixir from ~master~

      If you'd like to use the latest and greatest features, such as the
      upcoming
      [[https://github.com/elixir-lang/elixir/blob/v1.6/CHANGELOG.md#code-formatter][~mix
      format~ command]] slated for inclusion in Elixir 1.6, you can install the
      current version of the elixir-lang/elixir repository's ~master~ branch:

      #+BEGIN_SRC sh
        asdf install elixir master
      #+END_SRC

      You can use this version all the time via ~asdf global~ or ~asdf local~,
      or on one-off commands by setting the ~ASDF_ELIXIR_VERSION~ environment
      variable to ~master~.

***** Per-project tool versions

      By using ~asdf local~, you can configure pre-project tool versions, which
      are persisted in a project-local ~.tool-versions~ file you may wish to
      include in your global ~.gitignore~. When revisiting a project later, you
      can run ~asdf install~ with no additional arguments to ensure that the
      project's desired software versions are available.

**** Keeping up to date

     To update ~asdf~ itself:

     #+BEGIN_SRC sh
       asdf update
     #+END_SRC

     To update ~asdf~ plugins:

     #+BEGIN_SRC sh
       # update all plugins
       asdf plugin-update --all
       # update individual plugin
       asdf plugin-update erlang
     #+END_SRC

**** Troubleshooting

     You can inspect where a particular version of a particular language is
     installed with ~asdf where~:

     #+BEGIN_SRC sh
       asdf where erlang 20.2
       # /Users/shane/.asdf/installs/erlang/20.2
     #+END_SRC

     You can make sure that newly-installed binaries (such as those installed by
     ~npm~) are detected by using ~asdf reshim~:

     #+BEGIN_SRC sh
       asdf reshim nodejs 9.3.0
       # no output
     #+END_SRC

     You can inspect which specific binary will be used in your current context,
     accounting for both global and local tool versions, with ~asdf which~:

     #+BEGIN_SRC sh
       asdf which erlang
       # /Users/shane/.asdf/installs/erlang/20.1/bin/erlang
     #+END_SRC

**** Other notable plugins

     Here are a few other asdf plugins I'm prone to using in the course of my
     infrastructure-focused work:

     - [[https://github.com/Banno/asdf-kubectl][kubectl]]
     - [[https://github.com/alvarobp/asdf-minikube][minikube]]
     - [[https://github.com/Banno/asdf-hashicorp][terraform]] (recently combined
       support for multiple Hashicorp tools in one plugin)

**** Alternatives

     There are many alternative options for
     [[https://elixir-lang.github.io/install.html][installing Elixir]]. Here are
     a few in no particular order and with no specific endorsement:

     - Homebrew (~brew install erlang elixir node~)
     - [[https://nixos.org/nix/][Nix package manager]] and ~nix-shell~ (blog post forthcoming!)
     - [[https://github.com/taylor/kiex][kiex]] and [[https://github.com/yrashk/kerl][kerl]]

**** Software/Tool Versions

     | Software | Version |
     |----------+---------|
     | OSX      | 10.12.6 |
     | asdf     |   0.4.0 |
     | Elixir   |   1.5.3 |
     | Erlang   |  20.2.2 |
     | Node.js  |   9.3.0 |

**** Reference Links                                               :noexport:

     - https://github.com/asdf-vm/asdf/tree/8794210b8e7d87fcead78ae3b7b903cf87dcf0d6#setup
     - https://github.com/asdf-vm/asdf-erlang/issues/48#issuecomment-339137374

** Terraform                            :@terraform:infrastructure__as__code:
*** DONE Managing GitLab groups and projects with Terraform          :gitlab:
    CLOSED: [2017-12-17 Sun 11:26]
    :PROPERTIES:
    :EXPORT_DATE: 2017-12-17
    :EXPORT_FILE_NAME: managing-gitlab-with-terraform
    :END:

    I've begun using GitLab to host some of my personal projects on my own
    domain, sometimes as a mirror of a GitHub repository and sometimes as the
    primary home of the project.

    <!--more-->

**** Configuring the provider

     The following Terraform syntax can be used with the public/commercial
     GitLab.com service or with a self-hosted installation, as long as you have
     network connectivity and a token with the correct permissions. I'm using
     the latter.

     In my case, I used a *Personal Access Token* associated with my individual
     administrative account, with these permissions:

     - ~api~
     - ~read_user~

     #+BEGIN_SRC hcl
       variable "gitlab_token" {
         type    = "string"
         default = "hunter2"
       }

       variable "gitlab_url" {
         type    = "string"
         default = "https://gitlab.mydomain.com/api/v4/"
       }

       provider "gitlab" {
         base_url = "${var.gitlab_url}"
         token    = "${var.gitlab_token}"
         version  = "~> 1.0.0"
       }
     #+END_SRC

     If you'd like to keep these out of your source code, Terraform also allows
     setting variables in shell environment variables by prefixing them with
     ~TF_VAR_~, as in ~TF_VAR_gitlab_token~ and ~TF_VAR_gitlab_url~. You can
     manage these manually or with a tool like [[https://direnv.net/][direnv]],
     and keep the latter's ~.envrc~ file in your ~.gitignore~.

**** Creating a group

     #+BEGIN_SRC hcl
       resource "gitlab_group" "blogs" {
         name        = "blogs"
         path        = "blogs"
         description = "Public blog repositories"
       }
     #+END_SRC

***** Creating a nested group

      I have a group on my GitLab site for ~infrastructure~ projects, and a
      nested group on my site for [[https://helm.sh/][Helm]] charts within that ~infrastructure~
      group. Here's the Terraform code that manages those two groups and their
      relationship:

      #+BEGIN_SRC hcl
        resource "gitlab_group" "infrastructure" {
          name        = "infrastructure"
          path        = "infrastructure"
        }

        resource "gitlab_group" "helm-charts" {
          name        = "helm-charts"
          path        = "helm-charts"
          parent_id   = "${gitlab_group.infrastructure.id}"
        }
      #+END_SRC

      Projects created within this child group will appear on the site at
      paths that look like ~/infrastructure/helm-charts/foo-chart~.

**** Creating a project within a group

     Here's an example, a mirror of my public blog that is hosted on GitHub as
     well. Because of the nature of its contents, I've disabled most of the
     extra features offered by GitLab for this particular repository.

     #+BEGIN_SRC hcl :hl_lines 2,7
       resource "gitlab_project" "blogs-shanesveller-dot-com" {
         name                   = "shanesveller-dot-com"
         default_branch         = "master"
         description            = ""
         issues_enabled         = false
         merge_requests_enabled = false
         namespace_id           = "${gitlab_group.blogs.id}"
         snippets_enabled       = false
         visibility_level       = "public"
         wiki_enabled           = false
       }
     #+END_SRC

     With the highlighted lines in place, the repository path on the site
     becomes ~/blogs/shanesveller-dot-com~.

**** Closing Comments

     The GitLab provider as of 1.0.0 is missing some API coverage for what
     GitLab offers, and has some bugs associated with things like a project's
     default branch. Often I use ~git-flow~ and want to set a project's default
     branch to ~develop~, but that feature does not currently seem to work
     reliably due to
     [[https://github.com/terraform-providers/terraform-provider-gitlab/pull/41][this
     code typo]].

**** Software/Tools Versions
     :PROPERTIES:
     :CUSTOM_ID: gitlab-terraform-software-tools-versions
     :END:

     | Software                  | Version |
     |---------------------------+---------|
     | GitLab                    |  10.2.4 |
     | Terraform                 |  0.10.7 |
     | Terraform GitLab Provider |   1.0.0 |

**** Reference Links                                               :noexport:

     - https://www.terraform.io/docs/providers/gitlab/index.html

* Footnotes
* COMMENT Local Variables                                                   :ARCHIVE:
  # Local Variables:
  # eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
  # eval: (auto-fill-mode 1)
  # End:
