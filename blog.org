#+STARTUP: content
#+TITLE: Shane Sveller
#+AUTHOR: Shane Sveller
#+HUGO_BASE_DIR: .
#+HUGO_AUTO_SET_LASTMOD: t

* Utility Commands
~pkg-info-package-version~
~browse-url http://localhost:1313~

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
** Elixir                                                           :@elixir:
*** TODO Managing Elixir runtime version with Nix                :elixir:nix:
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_DATE: 2017-12-15
    :EXPORT_FILE_NAME: managing-elixir-runtime-version-with-nix
    :END:

I've experimented recently with managing multiple versions of Erlang and Elixir with Nix.

<!--more-->

**** Software/Tool Versions

 | Software | Verison |
 |----------+---------|
 | OSX      | 10.12.6 |
 | Nix      | 1.11.16 |

**** Installation

 #+BEGIN_SRC shell-script
 brew cask install nix
 #+END_SRC

**** Getting Started

**** References

*** TODO Managing Elixir runtime version with ASDF       :asdf:elixir:erlang:
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_FILE_NAME: managing-elixir-runtime-version-with-asdf
    :END:

**** Software/Tool Versions

 | Software | Version |
 |----------+---------|
 | OSX      | 10.12.6 |
 | asdf     |   0.4.0 |
 | Elixir   |   1.5.2 |
 | Erlang   |    20.1 |
 | Node.js  |   8.9.0 |

**** Installation

 #+BEGIN_SRC shell-script
   brew install asdf
 #+END_SRC

 Follow the instructions in the output, which you can read again with ~brew info asdf~.

 #+BEGIN_SRC shell-script
   asdf plugin-list-all
   asdf plugin-install erlang
   asdf plugin-install elixir
   asdf plugin-install nodejs
 #+END_SRC

**** Usage

 #+BEGIN_SRC shell-script
   asdf install erlang 20.1
   asdf install elixir 1.5.2
 #+END_SRC

**** Keeping up to date

 #+BEGIN_SRC shell-script
   asdf update
   asdf plugin-update --all
 #+END_SRC

**** Benefits

**** Alternatives

 - Homebrew
 - Nix and ~nix-shell~ (blog post forthcoming!)
   
** Emacs                                                             :@emacs:
*** TODO Blogging with org-mode and ox-hugo              :hugo:org:spacemacs:
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_DATE: 2017-12-12
    :EXPORT_FILE_NAME: blogging-with-org-mode-and-ox-hugo
    :EXPORT_HUGO_WEIGHT: auto
    :END:

 I've recently assembled a workflow for blogging with [[https://gohugo.io/][Hugo]], [[http://orgmode.org/][org-mode]], and
 [[https://www.netlify.com/][Netlify]] via a single ~.org~ document, with live reload during writing and ~git
 push~ driven deployments.

**** Requirements

 I've detailed my current environment in the
 [[#ox-hugo-software-tool-versions][Software/Tool Versions]] appendix below.
 Strictly speaking, the hard requirements of the
 [[https://melpa.org/#/ox-hugo][ox-hugo]] package are:

 - Emacs 24.4+
 - org-mode 9.0+

**** Installation

***** ~use-package~ Users

 #+BEGIN_SRC emacs-lisp
   (use-package ox-hugo
     :after ox)
 #+END_SRC

***** Spacemacs Users

 Use @@html:<kbd>@@ SPC f e d @@html:</kbd>@@ to open ~\~/.spacemacs~ (or
 ~\~/.spacemacs/init.el~) and within the ~dotspacemacs/layers~ function, add or
 update an entry to the ~dotspacemacs-configuration-layers~ list like so:

 #+BEGIN_SRC emacs-lisp
   (org :variables org-enable-hugo-support t)
 #+END_SRC

 Restart emacs or use @@html:<kbd>@@ SPC f e R @@html:</kbd>@@ to reload your
 configuration on-the-fly. If you already have an entry for the ~org~ layer,
 just include the variable ~org-enable-hugo-support~ with value ~t~.

**** Workflow                                                      :noexport:

**** Benefits                                                      :noexport:

**** Bonus: Live reload without a separate shell tab

 If you enable the ~prodigy~ layer in Spacemacs, or install the package manually,
 you can define a process in your ~dotspacemacs/user-config~ function like so:

 #+BEGIN_SRC emacs-lisp
   (prodigy-define-service
     :name "Hugo Personal Blog"
     :command "/usr/local/bin/hugo"
     :args '("server" "-D" "--navigateToChanged" "-t" "hugo-redlounge")
     :cwd "~/src/shanesveller-dot-com"
     :tags '(personal)
     :stop-signal 'sigkill
     :kill-process-buffer-on-stop t)
 #+END_SRC

 Then, to manage the process while editing with Emacs, I use @@html:<kbd>@@ SPC a
 S @@html:</kbd>@@ to open the Prodigy buffer, highlight the service entry, and
 use @@html:<kbd>@@ s @@html:</kbd>@@ to start the process, @@html:<kbd>@@ S
 @@html:</kbd>@@ to stop the service, and @@html:<kbd>@@ $ @@html:</kbd>@@ to
 view process output. @@html:<kbd>@@ q @@html:</kbd>@@ will back out of any
 Prodigy-generated buffers.

**** Bonus: Publishing Your Blog With Netlify                      :noexport:

**** Software/Tool Versions
     :PROPERTIES:
     :CUSTOM_ID: ox-hugo-software-tool-versions
     :END:

 | Software  |       Version |
 |-----------+---------------|
 | Emacs     |        25.3.1 |
 | Spacemacs |       0.300.0 |
 | Org       |         9.1.2 |
 | Hugo      |        0.31.1 |
 | ox-hugo   | 20171026.1402 |
 | prodigy   | 20170816.1114 |

** Kubernetes                                                   :@kubernetes:
*** TODO Allowing HTTP traffic with nginx-ingress
*** TODO Securing HTTPS traffic with cert-manager
*** TODO Monitoring GKE with CoreOS' Prometheus Operator :coreos:monitoring:prometheus:gke:kubernetes:
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_FILE_NAME: monitoring-gke-with-coreos-prometheus-operator
    :EXPORT_HUGO_WEIGHT: auto
    :END:

**** Background

 [[https://prometheus.io/][Prometheus]] is all the rage in the Kubernetes community, especially after
 becoming a Cloud Native Computing Foundation [[https://www.cncf.io/projects/][hosted project]].

 CoreOS has a project called [[https://github.com/coreos/prometheus-operator][prometheus-operator]] which helps manage instances
 of a Prometheus server, or its compatriot AlertManager, via Kubernetes manifests.

**** Getting Started

 I've chosen to install the Operator via the project's provided [[https://github.com/coreos/prometheus-operator/tree/v0.15.0/helm/prometheus-operator][Helm Chart]].

 First, install CoreOS' Helm repository

 #+BEGIN_SRC shell-script
   helm init --client-only
   helm repo add coreos https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/
 #+END_SRC

 I've also provided some customized values:

 #+BEGIN_SRC yaml
   global:
     ## Hyperkube image to use when getting ThirdPartyResources & cleaning up
     ##
     hyperkube:
       repository: quay.io/coreos/hyperkube
       # https://quay.io/repository/coreos/hyperkube?tag=latest&tab=tags
       tag: v1.8.4_coreos.0
       pullPolicy: IfNotPresent

   ## Prometheus-operator image
   ##
   image:
     repository: quay.io/coreos/prometheus-operator
     # https://quay.io/repository/coreos/prometheus-operator?tag=latest&tab=tags
     tag: v0.15.0
     pullPolicy: IfNotPresent
 #+END_SRC

 Finally, I install the chart with my supplied values in a ~monitoring~ namespace:

 #+BEGIN_SRC shell-script
   helm install --name prometheus-operator \
        --namespace monitoring \
        --values prometheus-operator-values.yaml \
        coreos/prometheus-operator
 #+END_SRC

**** Using kube-prometheus for basic cluster metrics

 #+BEGIN_SRC shell-script
   helm install --name kube-prometheus \
        --namespace monitoring \
        --values kube-prometheus-values.yaml \
        coreos/kube-prometheus
 #+END_SRC

**** Software/Tool Versions

 | Project                   |     Version |
 |---------------------------+-------------|
 | Google Cloud SDK          |     182.0.0 |
 | Kubernetes                | 1.8.3-gke.0 |
 | Helm                      |       2.7.2 |
 | Prometheus Operator       |      0.15.0 |
 | Prometheus Operator Chart |       0.0.7 |
 | Prometheus                |       1.8.2 |

*** TODO Building and testing software with Jenkins on Kubernetes

** Shell Programming                                                :@shells:
*** Fish Shell                                                        :@fish:
**** TODO Getting your feet wet with Fish Shell
     :PROPERTIES:
     :EXPORT_AUTHOR: Shane Sveller
     :EXPORT_FILE_NAME: getting-your-feet-wet-with-fish-shell
     :EXPORT_HUGO_WEIGHT: auto
     :END:

***** Software/Tool Versions

 | Software   | Version |
 |------------+---------|
 | OSX        | 10.12.6 |
 | iTerm 2    |   3.1.5 |
 | Fish       |   2.7.0 |
 | Oh My Fish |       6 |

***** Installation

 #+BEGIN_SRC shell-script
   brew install fish
 #+END_SRC

 Now, install oh-my-fish via ~git~ because curl-bash is for suckers!

 #+BEGIN_SRC shell-script
   git clone https://github.com/oh-my-fish/oh-my-fish
   cd oh-my-fish
   bin/install --offline
 #+END_SRC
* Pages
  :PROPERTIES:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
  :EXPORT_HUGO_MENU: :menu main
  :EXPORT_HUGO_SECTION: pages
  :END:
** DONE Hardware                                                  :@hardware:
   CLOSED: [2015-11-15 Sun 20:30]
   :PROPERTIES:
   :EXPORT_FILE_NAME: hardware
   :END:

My current custom-built gaming PC is as follows:

- Fractal Design R5 Black case
- Gigabyte GA-Z170X-Gaming GT motherboard
- Intel Core i7-6700k (Skylake) at 4.0GHz
- Corsair H110i GT liquid CPU cooler
- 32GB (4x8GB) Crucial Ballistix Elite DDR4-2666 RAM
- EVGA GeForce GTX 980 Superclocked 4GB
- Samsung 950 Pro 256GB m.2 solid-state drive
- Samsung 850 Pro 512GB solid-state drive
- Western Digital Red 1TB 7200rpm hard drive (2)
- Windows 10 Pro x64
- Razer Naga mouse
- Razer Black Widow Chroma keyboard
- LG 34UM95-P 34" Ultrawide monitor
- Logitech Z-2300 speakers

I do all of my professional/hobby development work on:

- Mid-2015 Retina MacBook Pro
- 16GB DDR3-1600
- 2.8 GHz Intel Core i7
- 500GB Apple/Samsung PCI-E solid-state drive
- OSX 10.11 El Capitan

I have a file server:

- Synology 1513+
- Western Digital Red 4TB 7200rpm hard drive (5)

I have an Intel NUC virtualization server:

- Intel Skull Canyon NUC 6i7KYK
- 2x16GB CRUCIAL 16GB DDR4 2400 BL SODIMM
- 2x CRUCIAL 500GB MX200 SS SSD M.2

I also have a SmartOS/SDC virtualization server:

- Lenovo ThinkServer TS140
- Intel Xeon E3-1225 v3 3.2GHz
- 32GB (4x8GB) Crucial ECC DDR3-1600
- Western Digital Red 1TB 7200rpm (3)
- Intel I340-T4 (PCIE 2.0 x 4 lane, 4x1Gb NIC)

** Networking                                                   :@networking:
*** TODO Home Network
    :PROPERTIES:
    :EXPORT_AUTHOR: Shane Sveller
    :EXPORT_FILE_NAME: home-network
    :END:

My home network is largely made up of Ubiquiti Unifi equipment.

**** Router

My router is a UBNT USG 3-port. I also own a 4-port USG Pro but cannot currently
tolerate the fan noise in an apartment, so that's still in the box.

**** Switching

I have a UBNT 24-port 250W POE switch for my main hub, as well as a UBNT 8-port
switch with POE passthrough for my TV stand so I can hard-wire my game consoles and
media devices.
** TODO Software and Services
   :PROPERTIES:
   :EXPORT_FILE_NAME: software-and-services
   :EXPORT_DATE: 2012-08-05
   :END:

   In no particular order, I endorse the following software, products and
   services on a personal level: # OSX Software

   - [[http://adium.im/][Adium]]
   - [[http://sprw.me/][Sparrow]] - no new development due to acquisition
     by Google is heartbreaking
   - [[http://mac.github.com][GitHub OSX client]]
   - [[http://reederapp.com/mac/][Reeder]] - Best RSS reader I've ever
     used, and it has a fantastic [[http://reederapp.com/ipad/][iOS port]]!
   - [[http://tapbots.com/tweetbot_mac/][TweetBot]] - Originally on
     [[http://tapbots.com/software/tweetbot/][iOS]], and is far and away my
     preferred Twitter client on both platforms. Beats the hell out of
     TweetDeck.
   - [[http://www.iterm2.com][iTerm 2]]
   - [[http://tmux.sourceforge.net][tmux]] - not OSX specific, but where I
     use it most

*** Cross-platform Software

    - [[http://dropbox.com/][Dropbox]] - still one of my favorite ways to
      keep files available on all my machines, including the iPad. Bonus:
      integration with
      [[http://pragprog.com/frequently-asked-questions/ebooks/read-on-desktop-laptop#dropbox][PragProg]]
      and
      [[http://shop.oreilly.com/category/customer-service/dropbox.do][O'Reilly]]
      for near-instant notificaiton of new e-book revisions!
    - [[http://sublimetext.com/2][SublimeText 2]] - see my 1-month
      impressions [[/posts/2012-08-05-sublimetext-2/][here]]!
    - [[http://spotify.com/][Spotify]] - the only streaming music service
      I'm still consistently glad I subscribe to. Works like a charm on
      Windows and OSX, and even has a
      [[http://spotify.com/us/download/previews/][Linux port]]!
    - [[https://kindle.amazon.com][Amazon Kindle]] - my preferred e-reader
      platform because it has great dedicated
      [[https://www.amazon.com/kindle-store-ebooks-newspapers-blogs/b/ref=r_ksl_h_i_gl?node=133141011][hardware
      readers]], and a reading app for pretty much
      [[https://www.amazon.com/gp/kindle/kcp/ref=r_kala_h_i_gl][every
      platform under the sun]].

*** Cloud/Web Apps

    - [[http://heroku.com/][Heroku]]
    - [[http://mint.com/][Mint]]
    - [[http://pinboard.in/][Pinboard]] - bookmarking service /ala/
      Delicious but without all the social trappings - and with great
      integration in Twitter clients/RSS readers!
    - [[http://pandora.com/][Pandora]] - I'm less happy with their variety
      than I wish, but still a great service

*** Screencasts

    - [[http://railscasts.com/][Railscasts]] - Ryan Bates has been
      consistently putting out focused, concise and informative screencasts
      on a variety of topics related to Ruby on Rails or programming at
      large. Congrats on a full year of doing RailsCasts full-time, Ryan!
      Happy to be a Pro subscriber.
    - [[https://peepcode.com/][PeepCode]] - May be less prolific than
      Railscasts, but the screencasts Geoffrey puts out are very meaty and
      I'm a big fan of the
      [[https://peepcode.com/products/play-by-play-tenderlove-ruby-on-rails][Play
      by Play series]].

*** Podcasts

    - [[http://ruby5.envylabs.com/][Ruby5]] is a great way to keep abreast
      of new or upcoming projects from the Ruby ecosystem
    - [[http://rubyrogues.com/][Ruby Rogues]] isn't nearly so bite-sized but
      dives deeper into subjects and often has very interesting guests

*** Reference Books

    - [[http://pragprog.com/][Pragmatic Programmers]] keeps publishing
      awesome books from great authors on exciting topics
    - [[http://www.manning.com/][Manning]] - I still buy the odd
      [[http://www.manning.com/about/meap][MEAP book]] on an upcoming
      technology and have yet to regret it
    - O'Reilly publishes most new books in an ebook format and sports
      integration with Dropbox for delivery of updated versions

*** E-Book Vendors

    - [[http://rpg.drivethrustuff.com/][DriveThruRPG]] has awesome sales on
      tabletop RPG rulebooks now and then - I've got a ton of
      [[http://www.white-wolf.com/classic-world-of-darkness][old]]/
      [[http://www.white-wolf.com/new-world-of-darkness][new World of
      Darkness]] and [[http://shadowrun4.com/][Shadowrun]], some
      Exalted/Trinity, and a dash of [[http://paizo.com/][Pathfinder]].

* Footnotes
* COMMENT Local Variables                                                   :ARCHIVE:
# Local Variables:
# eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
# End:
